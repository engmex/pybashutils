#!/usr/bin/env python
from pathlib import Path
from subprocess import check_call,CalledProcessError
from subprocess import DEVNULL
#
from binaryornot.check import is_binary
from colorama import init,Fore,Back
init()

MAXSIZE=20e6  #[bytes]

def findtext(root,txt,globext, verbose=0):
    if isinstance(globext,(Path,str)):
        globext = [globext]

    for e in globext:
        e = Path(e).expanduser() # in case "ext" is actually a specific filename
        if e.is_file():
            searchlist([e],txt, verbose)
        else: # usual case
            searchlist(Path(root).expanduser().rglob(str(e)), txt, verbose)

def searchlist(flist,txt,verbose):

    mat = []

    if verbose>=0:
        endl='\n'
    else:
        endl=' '

    for f in flist:
        # note that searchfile() does NOT work for PDF even with text inside...but Grep does. Hmm..
        if f.is_file() and f.stat().st_size<MAXSIZE:
            matchinglines = None

            if not is_binary(str(f)):
                here,matchinglines = searchfile(f,txt,verbose)
            elif f.suffix=='.pdf':
                here = searchbinary(f,txt)
            else:
                continue

            if here:
                print(Back.MAGENTA + str(f), end=endl)
                if matchinglines and verbose>=0:
                    print(Back.BLACK + '\n'.join(matchinglines))
                mat.append(f)

def searchbinary(f,txt):
    # FIXME: use Python directly to make cross-platform Windows
    try:
        check_call(['grep',txt,str(f)],stdout=DEVNULL) # grep return 0 if match
        return True
    except CalledProcessError: # grep returns 1 if no match
        return False
    except Exception as e: # catch-all for unexpected error
        print(f,e)



def searchfile(f,txt,verbose):
    here = False
    matchinglines=[]

    # NO speedup observed from doing this first
#    if not txt in str(f):
 #       return here,matchinglines

    with f.open('r') as o:

        try:
            for i,l in enumerate(o):
                if not txt in l:
                    continue
                matchinglines.append('{}: {}'.format(i,l))
                here=True
        except UnicodeDecodeError as e:
            if verbose>0:
                print('error on file {}  {}'.format(f,e))
            #logging.info('error on file {}  {}'.format(f,e))

    return here,matchinglines


if __name__ == '__main__':
    from argparse import ArgumentParser
    p = ArgumentParser(description='searches for TEXT under DIR and echos back filenames')
    p.add_argument('txt',help='text to search for') #required
    p.add_argument('globext',help='glob pattern',nargs='?',default=['*.py','*.rst','*.txt','*.pdf','*.md','*.tex'])
    p.add_argument('rdir',help='root dir to search',nargs='?',default='.')
    p.add_argument('-v','--verbose',action='store_true')
    p.add_argument('-q','--quiet',action='store_true')
    p = p.parse_args()
    
    verbose = 0
    verbose -= p.quiet
    verbose += p.verbose

    findtext(p.rdir, p.txt, p.globext, verbose)
